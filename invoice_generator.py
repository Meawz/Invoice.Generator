import tkinter as tk
from tkinter import ttk, messagebox
from tkinter.filedialog import asksaveasfilename
from fpdf import FPDF

class InvoicePDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'Your Company', 0, 1, 'C')
        self.set_font('Arial', '', 10)
        self.cell(0, 10, 'Your Company Address', 0, 1, 'C')
        self.cell(0, 10, 'Phone: (000) 000-0000 | Email: info@yourcompany.com', 0, 1, 'C')
        self.ln(10)

    def invoice_info(self, invoice_number, invoice_date, due_date):
        self.set_font('Arial', '', 10)
        self.cell(100, 10, f'Invoice Number: {invoice_number}', 0, 0)
        self.cell(0, 10, f'Invoice Date: {invoice_date}', 0, 1)
        self.cell(100, 10, f'Due Date: {due_date}', 0, 1)
        self.ln(10)

    def bill_to(self, customer_name, customer_address):
        self.set_font('Arial', 'B', 10)
        self.cell(0, 10, 'Bill To:', 0, 1)
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 10, customer_name)
        self.multi_cell(0, 10, customer_address)
        self.ln(10)

    def itemized_list(self, items):
        self.set_font('Arial', 'B', 10)
        self.cell(80, 10, 'Description', 1)
        self.cell(30, 10, 'Quantity', 1)
        self.cell(30, 10, 'Unit Price', 1)
        self.cell(30, 10, 'Total Price', 1)
        self.ln()
        self.set_font('Arial', '', 10)
        for item in items:
            self.cell(80, 10, item['description'], 1)
            self.cell(30, 10, str(item['quantity']), 1)
            self.cell(30, 10, f"${item['unit_price']:.2f}", 1)
            self.cell(30, 10, f"${item['total_price']:.2f}", 1)
            self.ln()

    def summary(self, subtotal, tax, total):
        self.set_font('Arial', '', 10)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Subtotal', 1)
        self.cell(30, 10, f"${subtotal:.2f}", 1, 1)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Tax', 1)
        self.cell(30, 10, f"${tax:.2f}", 1, 1)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Total', 1)
        self.cell(30, 10, f"${total:.2f}", 1, 1)

    def footer(self):
        self.set_y(-50)
        self.set_font('Arial', 'I', 10)
        self.multi_cell(0, 10, "Payment Terms: Please pay within 30 days.")
        self.set_font('Arial', '', 8)
        self.cell(0, 10, 'Generated by Your Company Name', 0, 1, 'C')

class InvoiceApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Invoice Generator")
        self.geometry("1280x720")

        self.items = []

        # Styling
        style = ttk.Style(self)
        style.configure('TButton', font=('Arial', 10), padding=5)
        style.configure('TLabel', font=('Arial', 11))
        style.configure('TEntry', font=('Arial', 11))

        # Invoice information inputs
        ttk.Label(self, text="Invoice Number:").grid(row=0, column=0, padx=10, pady=5)
        self.invoice_number = ttk.Entry(self)
        self.invoice_number.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(self, text="Invoice Date:").grid(row=1, column=0, padx=10, pady=5)
        self.invoice_date = ttk.Entry(self)
        self.invoice_date.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(self, text="Due Date:").grid(row=2, column=0, padx=10, pady=5)
        self.due_date = ttk.Entry(self)
        self.due_date.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(self, text="Customer Name:").grid(row=3, column=0, padx=10, pady=5)
        self.customer_name = ttk.Entry(self)
        self.customer_name.grid(row=3, column=1, padx=10, pady=5)

        ttk.Label(self, text="Customer Address:").grid(row=4, column=0, padx=10, pady=5)
        self.customer_address = ttk.Entry(self)
        self.customer_address.grid(row=4, column=1, padx=10, pady=5)

        # Items count label
        self.item_count_label = ttk.Label(self, text="Items attached: 0")
        self.item_count_label.grid(row=5, column=0, columnspan=2, pady=10)

        # Items table
        self.items_treeview = ttk.Treeview(self, columns=('description', 'quantity', 'unit_price', 'total_price'), show='headings', height=10)
        self.items_treeview.heading('description', text='Description')
        self.items_treeview.heading('quantity', text='Quantity')
        self.items_treeview.heading('unit_price', text='Unit Price')
        self.items_treeview.heading('total_price', text='Total Price')
        self.items_treeview.grid(row=6, column=0, columnspan=2, padx=10, pady=5)

        # Item input fields
        ttk.Label(self, text="Description:").grid(row=7, column=0, padx=10, pady=5)
        self.item_description = ttk.Entry(self)
        self.item_description.grid(row=7, column=1, padx=10, pady=5)

        ttk.Label(self, text="Quantity:").grid(row=8, column=0, padx=10, pady=5)
        self.item_quantity = ttk.Entry(self)
        self.item_quantity.grid(row=8, column=1, padx=10, pady=5)

        ttk.Label(self, text="Unit Price:").grid(row=9, column=0, padx=10, pady=5)
        self.item_unit_price = ttk.Entry(self)
        self.item_unit_price.grid(row=9, column=1, padx=10, pady=5)

        # Add Item button
        self.add_item_button = ttk.Button(self, text="Add Item", command=self.add_item)
        self.add_item_button.grid(row=10, column=0, padx=10, pady=10)

        # Generate PDF button
        self.generate_pdf_button = ttk.Button(self, text="Generate PDF", command=self.generate_pdf)
        self.generate_pdf_button.grid(row=10, column=1, padx=10, pady=10)

        # Remove Item button
        self.remove_item_button = ttk.Button(self, text="Remove Item", command=self.remove_item)
        self.remove_item_button.grid(row=11, column=0, columnspan=2, padx=10, pady=10)

        # Set up Treeview to be editable
        self.setup_treeview_editable()

    def setup_treeview_editable(self):
        # Enable editing of Treeview cells
        self.items_treeview.bind('<Double-1>', self.on_treeview_double_click)

    def on_treeview_double_click(self, event):
        # Get selected item
        item_id = self.items_treeview.selection()[0]
        item = self.items_treeview.item(item_id)

        # Get column index and value
        col = self.items_treeview.identify_column(event.x)
        col_index = int(str(col).replace('#', ''))
        column_name = self.items_treeview.heading(col, 'text')

        # Only allow editing of 'Quantity' and 'Unit Price' columns
        if column_name in ['Quantity', 'Unit Price']:
            # Create Entry widget for editing
            entry_edit = tk.Entry(self, bd=1, relief=tk.SUNKEN)
            entry_edit.grid(row=self.items_treeview.index(item_id)+6, column=col_index, sticky="nsew")  # Adjusted row index

            # Insert current value into Entry widget
            entry_edit.insert(0, item['values'][col_index-1])

            # Bind Return key press to save changes
            entry_edit.bind('<Return>', lambda event, item_id=item_id, col_index=col_index, column_name=column_name, entry_edit=entry_edit: self.on_edit_complete(event, item_id, col_index, column_name, entry_edit))

            # Set focus on the Entry widget
            entry_edit.focus_set()

    def on_edit_complete(self, event, item_id, col_index, column_name, entry_edit):
        new_value = entry_edit.get()

        # Update the item in the Treeview with the new value
        self.items_treeview.set(item_id, column=col_index-1, value=new_value)

        # Update the item in the items list
        item_index = self.items_treeview.index(item_id)
        if column_name == 'Quantity':
            self.items[item_index]['quantity'] = int(new_value)
            self.items[item_index]['total_price'] = self.items[item_index]['quantity'] * self.items[item_index]['unit_price']
        elif column_name == 'Unit Price':
            self.items[item_index]['unit_price'] = float(new_value)
            self.items[item_index]['total_price'] = self.items[item_index]['quantity'] * self.items[item_index]['unit_price']

        # Update the Treeview with the new total price
        self.items_treeview.set(item_id, column=3, value=f"${self.items[item_index]['total_price']:.2f}")

        # Remove the Entry widget
        entry_edit.destroy()

    def add_item(self):
        description = self.item_description.get()
        quantity = self.item_quantity.get()
        unit_price = self.item_unit_price.get()

        if not description or not quantity or not unit_price:
            messagebox.showerror("Error", "Please fill in all item fields.")
            return

        try:
            quantity = int(quantity)
            unit_price = float(unit_price)
            total_price = quantity * unit_price

            item = {
                'description': description,
                'quantity': quantity,
                'unit_price': unit_price,
                'total_price': total_price
            }
            self.items.append(item)

            self.items_treeview.insert('', 'end', values=(description, quantity, f"${unit_price:.2f}", f"${total_price:.2f}"))
            self.item_description.delete(0, tk.END)
            self.item_quantity.delete(0, tk.END)
            self.item_unit_price.delete(0, tk.END)

            self.item_count_label.config(text=f"Items attached: {len(self.items)}")

        except ValueError:
            messagebox.showerror("Error", "Quantity must be an integer and Unit Price must be a float.")

    def remove_item(self):
        selected_item = self.items_treeview.selection()
        if not selected_item:
            messagebox.showerror("Error", "Please select an item to remove.")
            return

        item_index = self.items_treeview.index(selected_item[0])
        self.items.pop(item_index)
        self.items_treeview.delete(selected_item)

        self.item_count_label.config(text=f"Items attached: {len(self.items)}")

    def generate_pdf(self):
        invoice_number = self.invoice_number.get()
        invoice_date = self.invoice_date.get()
        due_date = self.due_date.get()
        customer_name = self.customer_name.get()
        customer_address = self.customer_address.get()

        if not invoice_number or not invoice_date or not due_date or not customer_name or not customer_address or not self.items:
            messagebox.showerror("Error", "Please fill in all fields and add at least one item.")
            return

        subtotal = sum(item['total_price'] for item in self.items)
        tax = subtotal * 0.07
        total = subtotal + tax

        pdf = InvoicePDF()
        pdf.add_page()
        pdf.invoice_info(invoice_number, invoice_date, due_date)
        pdf.bill_to(customer_name, customer_address)
        pdf.itemized_list(self.items)
        pdf.summary(subtotal, tax, total)
        pdf.footer()

        pdf_file_path = asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")])
        if pdf_file_path:
            pdf.output(pdf_file_path)
            messagebox.showinfo("Success", f"Invoice PDF generated successfully and saved as {pdf_file_path}")

if __name__ == "__main__":
    app = InvoiceApp()
    app.mainloop()
