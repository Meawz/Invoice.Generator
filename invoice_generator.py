import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from fpdf import FPDF

class InvoicePDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'Your Company', 0, 1, 'C')
        self.set_font('Arial', '', 10)
        self.cell(0, 10, 'Your Company Address', 0, 1, 'C')
        self.cell(0, 10, 'Phone: (000) 000-0000 | Email: info@yourcompany.com', 0, 1, 'C')
        self.ln(10)

    def invoice_info(self, invoice_number, invoice_date, due_date):
        self.set_font('Arial', '', 10)
        self.cell(100, 10, f'Invoice Number: {invoice_number}', 0, 0)
        self.cell(0, 10, f'Invoice Date: {invoice_date}', 0, 1)
        self.cell(100, 10, f'Due Date: {due_date}', 0, 1)
        self.ln(10)

    def bill_to(self, customer_name, customer_address):
        self.set_font('Arial', 'B', 10)
        self.cell(0, 10, 'Bill To:', 0, 1)
        self.set_font('Arial', '', 10)
        self.cell(0, 10, customer_name, 0, 1)
        self.cell(0, 10, customer_address, 0, 1)
        self.ln(10)

    def itemized_list(self, items):
        self.set_font('Arial', 'B', 10)
        self.cell(80, 10, 'Description', 1)
        self.cell(30, 10, 'Quantity', 1)
        self.cell(30, 10, 'Unit Price', 1)
        self.cell(30, 10, 'Total Price', 1)
        self.ln()
        self.set_font('Arial', '', 10)
        for item in items:
            self.cell(80, 10, item['description'], 1)
            self.cell(30, 10, str(item['quantity']), 1)
            self.cell(30, 10, f"${item['unit_price']:.2f}", 1)
            self.cell(30, 10, f"${item['total_price']:.2f}", 1)
            self.ln()

    def summary(self, subtotal, tax, total):
        self.set_font('Arial', '', 10)
        self.cell(0, 10, '', 0, 1)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Subtotal', 1)
        self.cell(30, 10, f"${subtotal:.2f}", 1, 1)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Tax', 1)
        self.cell(30, 10, f"${tax:.2f}", 1, 1)
        self.cell(110, 10, '', 0)
        self.cell(30, 10, 'Total', 1)
        self.cell(30, 10, f"${total:.2f}", 1, 1)

    def footer(self):
        self.set_y(-50)
        self.set_font('Arial', 'I', 10)
        self.multi_cell(0, 10, "Payment Terms: Please pay within 30 days.")
        self.set_font('Arial', '', 8)
        self.cell(0, 10, 'Generated by Your Company Name', 0, 1, 'C')

class InvoiceApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Invoice Generator")
        self.geometry("400x400")

        # Labels and Entry widgets for invoice information
        tk.Label(self, text="Invoice Number:").grid(row=0, column=0, padx=10, pady=5)
        self.invoice_number = tk.Entry(self)
        self.invoice_number.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(self, text="Invoice Date:").grid(row=1, column=0, padx=10, pady=5)
        self.invoice_date = tk.Entry(self)
        self.invoice_date.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(self, text="Due Date:").grid(row=2, column=0, padx=10, pady=5)
        self.due_date = tk.Entry(self)
        self.due_date.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(self, text="Customer Name:").grid(row=3, column=0, padx=10, pady=5)
        self.customer_name = tk.Entry(self)
        self.customer_name.grid(row=3, column=1, padx=10, pady=5)

        tk.Label(self, text="Customer Address:").grid(row=4, column=0, padx=10, pady=5)
        self.customer_address = tk.Entry(self)
        self.customer_address.grid(row=4, column=1, padx=10, pady=5)

        # Button to add items
        self.items = []
        self.add_item_button = tk.Button(self, text="Add Item", command=self.add_item)
        self.add_item_button.grid(row=5, column=0, columnspan=2, pady=10)

        # Button to generate PDF
        self.generate_pdf_button = tk.Button(self, text="Generate PDF", command=self.generate_pdf)
        self.generate_pdf_button.grid(row=6, column=0, columnspan=2, pady=10)

    def add_item(self):
        item_window = tk.Toplevel(self)
        item_window.title("Add Item")

        tk.Label(item_window, text="Description:").grid(row=0, column=0, padx=10, pady=5)
        description_entry = tk.Entry(item_window)
        description_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(item_window, text="Quantity:").grid(row=1, column=0, padx=10, pady=5)
        quantity_entry = tk.Entry(item_window)
        quantity_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(item_window, text="Unit Price:").grid(row=2, column=0, padx=10, pady=5)
        unit_price_entry = tk.Entry(item_window)
        unit_price_entry.grid(row=2, column=1, padx=10, pady=5)

        def save_item():
            description = description_entry.get()
            quantity = int(quantity_entry.get())
            unit_price = float(unit_price_entry.get())
            total_price = quantity * unit_price
            self.items.append({
                'description': description,
                'quantity': quantity,
                'unit_price': unit_price,
                'total_price': total_price
            })
            item_window.destroy()

        tk.Button(item_window, text="Save", command=save_item).grid(row=3, column=0, columnspan=2, pady=10)

    def generate_pdf(self):
        invoice_number = self.invoice_number.get()
        invoice_date = self.invoice_date.get()
        due_date = self.due_date.get()
        customer_name = self.customer_name.get()
        customer_address = self.customer_address.get()

        if not invoice_number or not invoice_date or not due_date or not customer_name or not customer_address or not self.items:
            messagebox.showerror("Error", "Please fill in all fields and add at least one item.")
            return

        subtotal = sum(item['total_price'] for item in self.items)
        tax = subtotal * 0.07
        total = subtotal + tax

        pdf = InvoicePDF()
        pdf.add_page()
        pdf.invoice_info(invoice_number, invoice_date, due_date)
        pdf.bill_to(customer_name, customer_address)
        pdf.itemized_list(self.items)
        pdf.summary(subtotal, tax, total)
        pdf.footer()

        pdf_file_path = 'invoice.pdf'
        pdf.output(pdf_file_path)
        messagebox.showinfo("Success", f"Invoice PDF generated successfully and saved as {pdf_file_path}")

if __name__ == "__main__":
    app = InvoiceApp()
    app.mainloop()
